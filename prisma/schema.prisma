generator client {
  provider = "prisma-client-js"
}
// Generador de clientes para la segunda base de datos
// generator clientDb2 {
//   provider = "prisma-client-js"
//   output   = "./prisma-client-db2" // Directorio de salida para el cliente
//   datasource = "db2"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Segunda base de datos
// datasource db2 {
//   provider = "postgresql"
//   url      = env("DATABASE_URL_2") // URL de la segunda base de datos
// }
/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model area_point {
  area_id  Int
  ord      Int
  x        Float
  y        Float
  img_area img_area @relation(fields: [area_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([area_id, ord])
  @@unique([area_id, x, y], map: "unique_point")
}

model camera {
  id           String      @id @db.VarChar
  url          String      @unique @db.VarChar
  name         String      @unique @db.VarChar
  refresh_time Float
  backup_time  Float
  zone_id      Int
  zone         zone        @relation(fields: [zone_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  frame        frame[]
  model_cfg    model_cfg[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model count {
  total     Int 
  object    String    @db.VarChar
  timestamp DateTime  @default(now()) @db.Timestamptz(6)
  camera_id String    @db.VarChar
  model_id  String    @db.VarChar
  model_cfg model_cfg @relation(fields: [camera_id, model_id], references: [camera_id, model_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([camera_id, model_id, timestamp]) // Clave primaria compuesta con camera_id, model_id y timestamp
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model detection {
  id         Int         @id @default(autoincrement())
  frame_id   Int
  track_id   Int
  model_id   String      @db.VarChar
  area_id    Int
  cls        String      @db.VarChar
  bbox       Float[]
  confidence Float
  img_area   img_area    @relation(fields: [area_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  frame      frame       @relation(fields: [frame_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  model      model       @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  keypoints  keypoints[]
  seg_point  seg_point[]
}

model frame {
  id        Int         @id @default(autoincrement())
  camera_id String      @db.VarChar
  timestamp DateTime    @default(now()) @db.Timestamptz(6)
  detection detection[]
  camera    camera      @relation(fields: [camera_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model img_area {
  id         Int          @id @default(autoincrement())
  camera_id  String       @db.VarChar
  model_id   String       @db.VarChar
  name       String       @db.VarChar
  area_point area_point[]
  detection  detection[]
  model_cfg  model_cfg    @relation(fields: [camera_id, model_id], references: [camera_id, model_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([camera_id, model_id, name], map: "unique_area")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model keypoints {
  id          Int      @id @default(autoincrement())
  detection_id Int
  keypoints1   Float[]
  keypoints2   Float[]
  keypoints3   Float[]
  keypoints4   Float[]
  keypoints5   Float[]
  keypoints6   Float[]
  keypoints7   Float[]
  keypoints8   Float[]
  keypoints9   Float[]
  keypoints10  Float[]
  keypoints11  Float[]
  keypoints12  Float[]
  keypoints13  Float[]
  keypoints14  Float[]
  keypoints15  Float[]
  keypoints16  Float[]
  keypoints17  Float[]
  detection    detection @relation(fields: [detection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([detection_id, keypoints1, keypoints2, keypoints3, keypoints4, keypoints5, keypoints6, keypoints7, keypoints8, keypoints9, keypoints10, keypoints11, keypoints12, keypoints13, keypoints14, keypoints15, keypoints16, keypoints17], map: "unique_keypoints")

}

model model {
  id        String      @id @db.VarChar
  detection detection[]
  model_cfg model_cfg[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model model_cfg {
  camera_id       String     @db.VarChar
  model_id        String     @db.VarChar
  iou_check       Float
  min_det_conf    Float
  min_dets_needed Int        @default(0)
  count           count[]
  img_area        img_area[]
  camera          camera     @relation(fields: [camera_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  model           model      @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([camera_id, model_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model operating_time {
  id         Int      @id @default(autoincrement())
  status    String   @db.VarChar(3)
  timestamp DateTime @default(now()) @db.Timestamp(6)

}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model seg_point {
  detection_id Int
  ord          Int
  x            Float
  y            Float
  detection    detection @relation(fields: [detection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([detection_id, ord])
  @@unique([detection_id, x, y], map: "unique_seg_point")
}

model zone {
  id     Int      @id @default(autoincrement())
  name   String   @unique @db.VarChar
  camera camera[]
}
